MAVEN : Maven is a build Tool that automates the build process
Build Process : Developer write the code called as source code. They keep committing the change in source code, while they commit the code they also compile the code. Then they will test it if it works they will package it. Compile process 
generate output files that they package into archive. 
Source(Java, .net) > Compile(Javac, Rosyc) > Test(unit/Integration test) > Packaging(jar,war,exe,msi,zip) > Health check(
Code analysis, Find bugs) 
Source(Java,.net) : source code is generated by developer
Compile(Javac, Rosyc) : compiler used to compile the code, for e.g javac compiler generates class files
Test(unit/Integration test) : test written by developers to test their own code, Unit of code test by the Unit test. NOT SOFTWARE TESTING 
Packaging(jar,war,exe,msi,zip) : Class files will be packaged based on what the target is. jar war for java, msi,exe for windows 
Health check(Code analysis, Find bugs) : bugs or security vulnerabilities are checked

Build Tools : Based on programing language & targets build tool is decided
Maven : Java Build file - XML
Ant : Java Build file - XML (more scripting involved in Ant than MAVEN)
MsBuild : Microsoft build engine for building applications
Gradle : DSL based on Groovy
& NANT : Windows, .net platform
Make : builds executable programs & libraries from source code

Maven Phases : Validate Compile Test Package Integration-test Verify Install Deploy
If we start any phase it will perform all previous phases
Validate : Validate the project is correct & all necessory information is availabile
Compile : Compile the source code
Test : test compiled source code using unit test framework. 
Package : take compiled code & package it in its distributed format such as JAR. The packaging method is defined in POM.XML
Verify : run checks on results of integration test, ensures quality criateria has been mate
Install : install the package into local repository, for used as dependencies in other projects locally
Deploy : copies the final package to remote repository for sharing with other developers & projects, Have to be done in build enviornment

git account https://github.com/devopshydclub/vprofile-project.git  switch to branch vp-rem & open POM.XML
Packaging method, version, dependencies are defined in POM.XML.
artifact ID - artifact generated with this name, packaging - format of packaged file war, version of software
Properties are like variables : spring version, hibernate version, mysql-connector version
Dependency - groupID, artifactID & version : developer will mention dependencies that required to build software

Launch EC2 Ubuntu > ssh EC2 > 
apt update -y
apt install git -y
git clone https://github.com/devopshydclub/vprofile-repo.git
cd vprofile-repo
git checkout vp-rem
ls
apt search jdk  / yum search jdk
jre java runtime enviornment used to run java software, jdk java developement kit used to develope the java software 
apt install openjdk-8-jdk -y / yum install openjdk-1.8.0 -y
java -version
apt install maven -y 	/ yum install maven -y
mvn -version : find what version of java maven is using
mvn test : run test phase, it download needed dependencies from maven repository , BUILD SUCCESS
ls 	: you will see target directory which has test reports
mvn install : runs all previous phases, it download needed dependencies from maven repository, BUILD SUCCESS
ls target : you will see vprofile-V2.war which is artifact. 
Artifact is output of build process that we are goig to deploy further
ls /home/ubuntu/.m2/repository : downloaded dependencies kept locally
mvn clean : wipe out target directory & remove all output generated in previous build phase
mvn clean install : removes old data and generates new data

TO use specific version of maven : mvn -version : we have 3.6.0	
google search maven archive > archive.apache.org > select 3.3.9 > binaries > copy link of tar.gz
wget paste_the link_of_tar.gz
tar xvzf apache-maven-3.3.9.tar.gz
mv apache-maven-3.3.9 /opt
cd /opt/apache-maven-3.3.9/bin/
mvn -version 	: now we have 3.3.9
cd vprofile-repo
/opt/apache-maven-3.3.9/bin/mvn clean install

On windows : In powershell choco install maven, choco install jdk8
In git bash :
mkdir build
cd build
git clone https://github.com/devopshydclub/vprofile-repo.git
mvn install